# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(-37.5, 0.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=100.0, 
    textPoint=(-56.1962432861328, 6.77235794067383))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(50.0, 0.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='disc', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['disc'].BaseSolidExtrude(depth=10.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='disc(EN60)')
mdb.models['Model-1'].materials['disc(EN60)'].Density(table=((7800.0, ), ))
mdb.models['Model-1'].materials['disc(EN60)'].Elastic(table=((200000000000.0, 
    0.3), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='disc(EN60)', name=
    'disc', thickness=None)
mdb.models['Model-1'].parts['disc'].Set(cells=
    mdb.models['Model-1'].parts['disc'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-1')
mdb.models['Model-1'].parts['disc'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['disc'].sets['Set-1'], sectionName='disc', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    50.0, 0.0), point1=(41.25, 0.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=8.0, 
    textPoint=(16.9156341552734, 5.17885971069336))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='pin', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['pin'].BaseSolidExtrude(depth=25.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
del mdb.models['Model-1'].parts['pin']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    50.0, 0.0), point1=(56.25, -8.75))
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    50.0, 0.0), point1=(35.0, -6.25))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=4.0, 
    textPoint=(-3.17877960205078, 5.06504058837891))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='pin', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['pin'].BaseSolidExtrude(depth=25.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='pin(al6061)')
mdb.models['Model-1'].materials['pin(al6061)'].Density(table=((2700.0, ), ))
mdb.models['Model-1'].materials['pin(al6061)'].Elastic(table=((68900000000.0, 
    0.33), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='pin(al6061)', name=
    'pin', thickness=None)
mdb.models['Model-1'].parts['pin'].Set(cells=
    mdb.models['Model-1'].parts['pin'].cells.getSequenceFromMask(('[#1 ]', ), )
    , name='Set-1')
mdb.models['Model-1'].parts['pin'].SectionAssignment(offset=0.0, offsetField=''
    , offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['pin'].sets['Set-1'], sectionName='pin', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='disc-1', part=
    mdb.models['Model-1'].parts['disc'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='pin-1', part=
    mdb.models['Model-1'].parts['pin'])
mdb.models['Model-1'].parts['disc'].ReferencePoint(point=(0.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('disc-1', ), vector=
    (0.0, 0.0, -10.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].CoupledTempDisplacementStep(cetol=None, creepIntegration=
    None, deltmx=None, initialInc=240.0, name='Step-1', nlgeom=ON, previous=
    'Initial', timeIncrementationMethod=FIXED, timePeriod=240.0)
mdb.models['Model-1'].rootAssembly.translate(instanceList=('pin-1', ), vector=(
    0.0, 0.0, 10.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('pin-1', ), vector=(
    0.0, 0.0, 20.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('pin-1', ), vector=(
    0.0, 0.0, -30.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('pin-1', ), vector=(
    0.0, 0.0, 50.0))
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.25, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Step-1', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-1'], name='Int-1', 
    slave=mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-1'], sliding=
    FINITE, thickness=ON)
mdb.models['Model-1'].rootAssembly.translate(instanceList=('pin-1', ), vector=(
    0.0, 0.0, -50.0))
mdb.models['Model-1'].rootAssembly.Set(name='Set-1', vertices=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].vertices.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].ConcentratedForce(cf1=20.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-1'])
del mdb.models['Model-1'].loads['Load-1']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].materials['disc(EN60)'].Conductivity(table=((0.45, ), ))
mdb.models['Model-1'].materials['disc(EN60)'].SpecificHeat(table=((466000.0, ), 
    ))
mdb.models['Model-1'].materials['pin(al6061)'].Conductivity(table=((0.15, ), ))
mdb.models['Model-1'].materials['pin(al6061)'].SpecificHeat(table=((896000.0, 
    ), ))
del mdb.models['Model-1'].steps['Step-1']
mdb.models['Model-1'].TempDisplacementDynamicsStep(description='wear', name=
    'Step-1', previous='Initial', scaleFactor=1.0)
mdb.models['Model-1'].ContactProperty('IntProp-2')
mdb.models['Model-1'].interactionProperties['IntProp-2'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-2'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.25, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-3', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-3'], 
    mechanicalConstraint=KINEMATIC, name='Int-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-3'], sliding=FINITE)
del mdb.models['Model-1'].interactionProperties['IntProp-2']
del mdb.models['Model-1'].interactionProperties['IntProp-1']
del mdb.models['Model-1'].interactions['Int-1']
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.25, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-5', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-5', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-5'], 
    mechanicalConstraint=KINEMATIC, name='Int-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-5'], sliding=FINITE)
del mdb.models['Model-1'].interactions['Int-1']
del mdb.models['Model-1'].interactionProperties['IntProp-1']
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.25, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].rootAssembly.Surface(name='m_Surf-7', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-7', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Step-1', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['m_Surf-7'], 
    mechanicalConstraint=KINEMATIC, name='Int-1', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-7'], sliding=FINITE)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-9', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=0.4, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-9'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].faces.getSequenceFromMask(
    ('[#4 ]', ), ), name='Set-2')
mdb.models['Model-1'].ZsymmBC(createStepName='Step-1', localCsys=None, name=
    'zsymm', region=mdb.models['Model-1'].rootAssembly.sets['Set-2'])
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'pin', region=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].sets['Set-1'], u1=0.0
    , u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].parts['pin'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4T, elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['pin'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['pin'].seedPart(deviationFactor=0.1, minSizeFactor=
    0.1, size=1.1)
mdb.models['Model-1'].parts['pin'].generateMesh()
mdb.models['Model-1'].parts['pin'].generateMesh()
mdb.models['Model-1'].parts['disc'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8T, elemLibrary=EXPLICIT, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6T, elemLibrary=EXPLICIT), 
    ElemType(elemCode=C3D4T, elemLibrary=EXPLICIT)), regions=(
    mdb.models['Model-1'].parts['disc'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Model-1'].parts['disc'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=28.0)
mdb.models['Model-1'].parts['disc'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(name='allnoded', nodes=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].nodes.getSequenceFromMask(
    mask=('[#fff3ff31 #ffffffff #cffcffff #ffffffff #fffff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].nodes.getSequenceFromMask(
    mask=('[#ffffffff:45 #1fffffff #ffffffff:2 #1011e003 #a921c7e #12 ]', ), ))
mdb.models['Model-1'].rootAssembly.Set(name='center', nodes=
    mdb.models['Model-1'].rootAssembly.instances['pin-1'].nodes.getSequenceFromMask(
    mask=('[#0 #8000000 ]', ), ))
mdb.models['Model-1'].Temperature(createStepName='Initial', 
    crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(25.0, ), name='Predefined Field-1', region=
    mdb.models['Model-1'].rootAssembly.sets['allnoded'])
mdb.models['Model-1'].Velocity(axisBegin=(0.0, 0.0, 0.0), axisEnd=(0.0, 0.0, 
    1.0), distributionType=MAGNITUDE, field='', name='Predefined Field-2', 
    omega=15.7, region=
    mdb.models['Model-1'].rootAssembly.instances['disc-1'].sets['Set-1'], 
    velocity1=0.0, velocity2=0.0, velocity3=0.0)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='wear', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, parallelizationMethodExplicit=DOMAIN, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['wear'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['wear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-BFMTEC9', 'handle': 0, 'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_DISC-1_DISC-REFPT_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wear'})
mdb.jobs['wear']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-BFMTEC9', 'handle': 25916, 'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'wear'})
mdb.jobs['wear']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-BFMTEC9', 'handle': 29752, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 7.00694581610151e-05, 'stepTime': 0.0, 
    'totalEnergy': 2.7947736594645e+16, 'cpuTime': 0.0, 'jobName': 'wear', 
    'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.5266998124544e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The slave surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the master surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the master surface becomes a pure slave surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'wear'})
mdb.jobs['wear']._Message(JOB_COMPLETED, {'time': 'Thu Jun 23 01:04:29 2022', 
    'jobName': 'wear'})
mdb.jobs['wear'].submit(consistencyChecking=OFF)
mdb.jobs['wear']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-BFMTEC9', 'handle': 0, 'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_DISC-1_DISC-REFPT_ HAS NO MEMBERS AND WILL BE IGNORED.  NODES DEFINED IN THIS SET MAY HAVE BEEN DELETED BECAUSE THEY WERE NOT CONNECTED TO ANY ELEMENTS.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'wear'})
mdb.jobs['wear']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-BFMTEC9', 'handle': 4876, 'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'Boundary conditions are defined at the nodes contained in node set WarnNodeBcIntersectKinCon. In addition the nodes are also part of a surface involved in kinematic contact. The kinematic contact constraint will be overridden by the boundary conditions in case of a conflict. Penalty contact may be used instead.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'wear'})
mdb.jobs['wear']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-BFMTEC9', 'handle': 22892, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 7.00694581610151e-05, 'stepTime': 0.0, 
    'totalEnergy': 2.7947736594645e+16, 'cpuTime': 0.0, 'jobName': 'wear', 
    'step': 1, 'increment': 0, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.5266998124544e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'wear'})
mdb.jobs['wear']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The slave surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the master surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the master surface becomes a pure slave surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.0500829145312309, 
    'stableTimeIncrement': 0.000110738837975077, 
    'stepTime': 0.0500829145312309, 'totalEnergy': 2.79497294594703e+16, 
    'cpuTime': 1.10000002384186, 'jobName': 'wear', 'step': 1, 
    'increment': 457, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.52488908108595e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.100025743246078, 
    'stableTimeIncrement': 0.00011073883069912, 'stepTime': 0.100025743246078, 
    'totalEnergy': 2.79515891803095e+16, 'cpuTime': 2.09999990463257, 
    'jobName': 'wear', 'step': 1, 'increment': 908, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.49994001871667e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.150078371167183, 
    'stableTimeIncrement': 0.000110738044895697, 'stepTime': 0.150078371167183, 
    'totalEnergy': 2.7953300724777e+16, 'cpuTime': 3.20000004768372, 
    'jobName': 'wear', 'step': 1, 'increment': 1360, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.45062627796582e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.200019106268883, 
    'stableTimeIncrement': 0.000110733730252832, 'stepTime': 0.200019106268883, 
    'totalEnergy': 2.79549156324803e+16, 'cpuTime': 4.30000019073486, 
    'jobName': 'wear', 'step': 1, 'increment': 1811, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.42400325209293e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.250069320201874, 
    'stableTimeIncrement': 0.0001107316929847, 'stepTime': 0.250069320201874, 
    'totalEnergy': 2.79565391301181e+16, 'cpuTime': 6.0, 'jobName': 'wear', 
    'step': 1, 'increment': 2263, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.45287268007936e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.300014525651932, 
    'stableTimeIncrement': 0.000110733366454951, 'stepTime': 0.300014525651932, 
    'totalEnergy': 2.79582700019384e+16, 'cpuTime': 9.10000038146973, 
    'jobName': 'wear', 'step': 1, 'increment': 2714, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.5036000019415e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.350071460008621, 
    'stableTimeIncrement': 0.000110735803900752, 'stepTime': 0.350071460008621, 
    'totalEnergy': 2.79601855573524e+16, 'cpuTime': 11.8999996185303, 
    'jobName': 'wear', 'step': 1, 'increment': 3166, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.52986627709338e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.400017648935318, 
    'stableTimeIncrement': 0.000110736611532047, 'stepTime': 0.400017648935318, 
    'totalEnergy': 2.7962225666818e+16, 'cpuTime': 14.3000001907349, 
    'jobName': 'wear', 'step': 1, 'increment': 3617, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.53465073644339e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.450074583292007, 
    'stableTimeIncrement': 0.000110736509668641, 'stepTime': 0.450074583292007, 
    'totalEnergy': 2.79642636288e+16, 'cpuTime': 16.7000007629395, 
    'jobName': 'wear', 'step': 1, 'increment': 4069, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.53201832414413e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.500020742416382, 
    'stableTimeIncrement': 0.000110736291389912, 'stepTime': 0.500020742416382, 
    'totalEnergy': 2.79661942165996e+16, 'cpuTime': 19.0, 'jobName': 'wear', 
    'step': 1, 'increment': 4520, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.50854471725875e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.550077676773071, 
    'stableTimeIncrement': 0.000110735461930744, 'stepTime': 0.550077676773071, 
    'totalEnergy': 2.79679916604129e+16, 'cpuTime': 21.5, 'jobName': 'wear', 
    'step': 1, 'increment': 4972, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.46577905680384e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.600023865699768, 
    'stableTimeIncrement': 0.000110733948531561, 'stepTime': 0.600023865699768, 
    'totalEnergy': 2.79696774350766e+16, 'cpuTime': 23.8999996185303, 
    'jobName': 'wear', 'step': 1, 'increment': 5423, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.44364574815027e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.650080800056458, 
    'stableTimeIncrement': 0.000110734428744763, 'stepTime': 0.650080800056458, 
    'totalEnergy': 2.79713782421258e+16, 'cpuTime': 26.2000007629395, 
    'jobName': 'wear', 'step': 1, 'increment': 5875, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.4685710539817e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.700026988983154, 
    'stableTimeIncrement': 0.000110736407805234, 'stepTime': 0.700026988983154, 
    'totalEnergy': 2.7973201455743e+16, 'cpuTime': 28.6000003814697, 
    'jobName': 'wear', 'step': 1, 'increment': 6326, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.51291498070016e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.750083923339844, 
    'stableTimeIncrement': 0.000110736495116726, 'stepTime': 0.750083923339844, 
    'totalEnergy': 2.79751814356664e+16, 'cpuTime': 31.0, 'jobName': 'wear', 
    'step': 1, 'increment': 6778, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.5380838917079e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.800030112266541, 
    'stableTimeIncrement': 0.000110736807982903, 'stepTime': 0.800030112266541, 
    'totalEnergy': 2.7977264494805e+16, 'cpuTime': 33.4000015258789, 
    'jobName': 'wear', 'step': 1, 'increment': 7229, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.5441605993431e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.85008704662323, 
    'stableTimeIncrement': 0.000110736567876302, 'stepTime': 0.85008704662323, 
    'totalEnergy': 2.79793582913618e+16, 'cpuTime': 35.7000007629395, 
    'jobName': 'wear', 'step': 1, 'increment': 7681, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.5411258022953e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.900033235549927, 
    'stableTimeIncrement': 0.000110735236376058, 'stepTime': 0.900033235549927, 
    'totalEnergy': 2.79813533036708e+16, 'cpuTime': 38.0999984741211, 
    'jobName': 'wear', 'step': 1, 'increment': 8132, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.51929273869926e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 0.950090169906616, 
    'stableTimeIncrement': 0.000110735221824143, 'stepTime': 0.950090169906616, 
    'totalEnergy': 2.79832108770263e+16, 'cpuTime': 40.4000015258789, 
    'jobName': 'wear', 'step': 1, 'increment': 8584, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.48151393792819e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'wear'})
mdb.jobs['wear']._Message(STATUS, {'totalTime': 1.0, 
    'stableTimeIncrement': 0.000110735978523735, 'stepTime': 1.0, 
    'totalEnergy': 2.7984976108585e+16, 'cpuTime': 42.7999992370605, 
    'jobName': 'wear', 'step': 1, 'increment': 9035, 'phase': EXPLICIT_PHASE, 
    'kineticEnergy': 1.46166716248883e+15})
mdb.jobs['wear']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'wear'})
mdb.jobs['wear']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'wear'})
mdb.jobs['wear']._Message(JOB_COMPLETED, {'time': 'Thu Jun 23 01:05:32 2022', 
    'jobName': 'wear'})
# Save by Dell on 2022_06_23-01.09.13; build 6.14-5 2015_08_18-20.07.49 135153
